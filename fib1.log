Messages
=========================
SPIM Version Version 7.3 of August 26, 2006
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Loaded: C:\Program Files\PCSpim\exceptions.s
Memory and registers cleared and the simulator reinitialized.

SPIM Version Version 7.3 of August 26, 2006
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
C:\Documents and Settings\Ja\Pulpit\task1\fib1.s successfully loaded
Memory and registers cleared and the simulator reinitialized.

SPIM Version Version 7.3 of August 26, 2006
Copyright 1990-2004 by James R. Larus (larus@cs.wisc.edu).
All Rights Reserved.
DOS and Windows ports by David A. Carley (dac@cs.wisc.edu).
Copyright 1997 by Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
C:\Documents and Settings\Ja\Pulpit\task1\fib1.s successfully loaded


Registers
=========================
 PC      = 00000000   EPC     = 00000000   Cause   = 00000000   BadVAddr= 00000000
 Status  = 3000ff10   HI      = 00000000   LO      = 00000000
                                 General Registers
R0  (r0) = 00000000  R8  (t0) = 00000000  R16 (s0) = 00000000  R24 (t8) = 00000000
R1  (at) = 00000000  R9  (t1) = 00000000  R17 (s1) = 00000000  R25 (t9) = 00000000
R2  (v0) = 00000000  R10 (t2) = 00000000  R18 (s2) = 00000000  R26 (k0) = 00000000
R3  (v1) = 00000000  R11 (t3) = 00000000  R19 (s3) = 00000000  R27 (k1) = 00000000
R4  (a0) = 00000000  R12 (t4) = 00000000  R20 (s4) = 00000000  R28 (gp) = 10008000
R5  (a1) = 00000000  R13 (t5) = 00000000  R21 (s5) = 00000000  R29 (sp) = 7fffeffc
R6  (a2) = 00000000  R14 (t6) = 00000000  R22 (s6) = 00000000  R30 (s8) = 00000000
R7  (a3) = 00000000  R15 (t7) = 00000000  R23 (s7) = 00000000  R31 (ra) = 00000000

 FIR    = 00009800    FCSR    = 00000000    FCCR   = 00000000   FEXR    = 00000000
 FENR   = 00000000
                              Double Floating Point Registers
FP0  = 0.000000      FP8  = 0.000000      FP16 = 0.000000      FP24 = 0.000000     
FP2  = 0.000000      FP10 = 0.000000      FP18 = 0.000000      FP26 = 0.000000     
FP4  = 0.000000      FP12 = 0.000000      FP20 = 0.000000      FP28 = 0.000000     
FP6  = 0.000000      FP14 = 0.000000      FP22 = 0.000000      FP30 = 0.000000     
                              Single Floating Point Registers
FP0  = 0.000000      FP8  = 0.000000      FP16 = 0.000000      FP24 = 0.000000     
FP1  = 0.000000      FP9  = 0.000000      FP17 = 0.000000      FP25 = 0.000000     
FP2  = 0.000000      FP10 = 0.000000      FP18 = 0.000000      FP26 = 0.000000     
FP3  = 0.000000      FP11 = 0.000000      FP19 = 0.000000      FP27 = 0.000000     
FP4  = 0.000000      FP12 = 0.000000      FP20 = 0.000000      FP28 = 0.000000     
FP5  = 0.000000      FP13 = 0.000000      FP21 = 0.000000      FP29 = 0.000000     
FP6  = 0.000000      FP14 = 0.000000      FP22 = 0.000000      FP30 = 0.000000     
FP7  = 0.000000      FP15 = 0.000000      FP23 = 0.000000      FP31 = 0.000000     


Console
=========================


Text Segment
=========================
[0x00400000]        0x3c011001  lui $1, 4097                    ; 48: lw   $2, one
[0x00400004]        0x8c220004  lw $2, 4($1)
[0x00400008]        0x3c011001  lui $1, 4097                    ; 49: lw   $3, ubound
[0x0040000c]        0x8c230000  lw $3, 0($1)
[0x00400010]        0x3c011001  lui $1, 4097                    ; 50: lw   $6, one
[0x00400014]        0x8c260004  lw $6, 4($1)
[0x00400018]        0x00002021  addu $4, $0, $0                 ; 51: addu $4, $0, $0
[0x0040001c]        0x00002821  addu $5, $0, $0                 ; 52: addu $5, $0, $0
[0x00400020]        0x0083402a  slt $8, $4, $3                  ; 54: slt  $8, $4, $3
[0x00400024]        0x00a63821  addu $7, $5, $6                 ; 55: addu $7, $5, $6
[0x00400028]        0x11000009  beq $8, $0, 40 [loop-0x00400028]; 56: beq  $8, $0, loop
[0x0040002c]        0x00044821  addu $9, $0, $4                 ; 57: addu $9, $0, $4
[0x00400030]        0x00094880  sll $9, $9, 2                   ; 58: sll  $9, $9, 2                 # calculate index to fib_array
[0x00400034]        0x3c011001  lui $1, 4097                    ; 59: sw   $7, fib_array($9)
[0x00400038]        0x00290821  addu $1, $1, $9
[0x0040003c]        0xac270008  sw $7, 8($1)
[0x00400040]        0x00062821  addu $5, $0, $6                 ; 60: addu $5, $0, $6 
[0x00400044]        0x00073021  addu $6, $0, $7                 ; 61: addu $6, $0, $7 
[0x00400048]        0x00822021  addu $4, $4, $2                 ; 62: addu $4, $4, $2
[0x0040004c]        0x1000fff4  beq $0, $0, -44 [top-0x0040004c]; 63: beq  $0, $0, top
[0x00400050]        0x1000ffff  beq $0, $0, 0 [loop-0x00400050] ; 66: beq $0, $0, loop

        KERNEL


Data Segment
=========================
        DATA
[0x10000000]...[0x10010000]        0x00000000
[0x10010000]                        0x0000000C  0x00000001  0x00000000  0x00000000
[0x10010010]...[0x10040000]        0x00000000

        STACK
[0x7fffeffc]                        0x00000000

        KERNEL DATA
[0x90000000]...[0x90010000]        0x00000000


